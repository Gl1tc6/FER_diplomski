// ====================== PRIBAVI =======================
fetch0: a_sel=7, b_sel=7, alu_sel=OR, mar_sel=LOAD; // MAR <- PC
fetch1: ir1_sel=LOAD, read, if wait then goto fetch1 endif; // IR_high <- MEM(MAR)
fetch2: a_sel=7, c_in, alu_sel=ADDA, r7_write; // PC <- PC+1
fetch3: a_sel=7, b_sel=7, alu_sel=OR, mar_sel=LOAD; // MAR <- PC
fetch4: ir0_sel=LOAD, read, if wait then goto fetch4 endif; // IR_low <- MEM(MAR)
fetch5: a_sel=7, c_in, alu_sel=ADDA, r7_write, goto opcode[IR_OPCODE]; // PC <- PC+1
// ============= DIO OPERACIJSKIH KODOVA =============
// 0 NOP
opcode[0]: goto fetch0;
// 1 LOAD_IMMEDIATE (ri <- ir_const8)
opcode[1]: result_sel=IR_CONST8, ri_sel, goto fetch0;
// 2 ADD (ri <- rj + rk)
opcode[2]: ri_sel, rj_sel, rk_sel, alu_sel=ADD, if m_7 then goto opcode2.1 else goto opcode2.2 endif;
// 3 HALT
opcode[3]: goto opcode[3];

// --- Zadaca - moje instrukcije ----
// 4 MOVE (ri <- rj)
opcode[4]: ri_sel, rj_sel, alu_sel=OR, result_sel=ALU, goto fetch0;
// 5 LOAD (ri <- MEM(addr))
opcode[5]: result_sel=IR_CONST8, r4_write, goto opcode5.1;
// 6 STORE (MEM(rk) <- rj)
opcode[6]: rk_sel, alu_sel=ADDA, mar_sel=LOAD, goto opcode6.1;
// 7 JMP (PC <- addr)
opcode[7]: result_sel=IR_CONST8, r7_write, goto fetch0;
// 8 JZ rj rk (rj=0 -> PC <- rk)
opcode[8]: rj_sel, alu_sel=SUBA, if c_out then goto opcode8.1 else goto fetch0 endif;
// 9 SUB ri, rj, rk (ri <- rj-rk)
opcode[9]: ri_sel, rj_sel, rk_sel, alu_sel=SUB, if m_7 then goto opcode2.1 else goto opcode2.2 endif;
// 10 SHL ri, rj (ri <- L_SHFT(rj))
opcode[10]: rj_sel, alu_sel=ADDA, r4_write, goto opcode10.1;
// 11 LDSP const (r5 <- const)
opcode[11]: result_sel=ir_const8, r5_write, goto fetch0;
// 12 PUSH rj (S(r5) <- rj, r5++)
opcode[12]: rj_sel, alu_sel=ADDA, mdr_sel=LOAD_ALU goto opcode12.1;
// 13 POP ri (MDR <- S(ri), r5--)
opcode[13]: a_sel=5, c_in, alu_sel=ADDA, mar_sel=LOAD, goto opcode13.1;
// 14 CALL addr (PC <- addr, pc -> stack)
opcode[14]: a_sel=7, alu_sel=ADDA, mdr_sel=LOAD_ALU goto opcode14.1;
// 15 RET rj (PC <- stack)
opcode[15]: a_sel=5, c_in, alu_sel=ADDA, mar_sel=LOAD, goto opcode15.1;
// 16 STK_set (SP <- const)
opcode[16]: result_sel=IR_CONST8, r5_write, goto fetch0;

// ================= DIO EKSTENZIJE ================
// postavi zastavicu N
opcode2.1: a_sel=4, b_sel=4, alu_sel=XOR, r4_write; // pomocni registar r4 <- 0
a_sel=4, c_in, alu_sel=ADDA, r6_write, goto fetch0; // r4=0 + c_in=1 -> r6 (SR)
// obrisi zastavicu N
opcode2.2: a_sel=4, b_sel=4; alu_sel=XOR, r4_write; // pomocni registar r4 <- 0
a_sel=4, alu_sel=ADDA, r6_write, goto fetch0; // r4=0 -> r6 (SR)

// LOAD
opcode5.1: a_sel=4, b_sel=4, alu_sel=AND, mar_sel=LOAD;
opcode5.2: read, mdr_sel=LOAD_MEM, if wait then goto opcode5.2 endif;
result_sel=MDR, ri_sel, goto fetch0;
// STORE
opcode6.1: rj_sel, alu_sel=ADDA, mdr_sel=LOAD_ALU;
opcode6.2: mdr_sel=LOAD_MEM, write, if wait then goto opcode6.2 else goto fetch0 endif;
// JZ
opcode8.1: rk_sel, alu_sel=ADDA, r7_write, goto fetch0;
// LSFT
opcode10.1: a_sel=4, b_sel=4, alu_sel=ADD, ri_sel, if m_7 then goto opcode2.1 else goto opcode2.2 endif;
// PUSH
opcode12.1: a_sel=5, alu_sel=ADDA, mar_sel=LOAD, goto opcode12.2; // MAR <- r5(SP)
opcode12.2: write, if wait then goto opcode12.2 else goto opcode12.3 endif;
opcode12.3: a_sel=5, alu_sel=SUBA, result_sel=ALU, r5_write, goto fetch0;
// POP
opcode13.1: read, mdr_sel=LOAD_MEM, if wait then goto opcode13.1 endif;
ri_sel, result_sel=MDR, goto fetch0;
// CALL
opcode14.1: a_sel=5, alu_sel=ADDA, mar_sel=LOAD, goto opcode14.2; // MAR <- r5(SP)
opcode14.2: write, if wait then goto opcode14.2 else goto opcode14.3 endif;
opcode14.3: a_sel=5, alu_sel=SUBA, result_sel=ALU, r5_write;
opcode14.4: result_sel=IR_CONST8, r7_write, goto fetch0;
// RET
opcode15.1: read, if wait then goto opcode15.1 else goto opcode15.2 endif;
opcode15.2: result_sel=MDR, r7_write, goto fetch0;